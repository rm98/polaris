import {
    ObjectKind,
    PolarisType,
    SloCompliance,
    SloMappingBase,
    SloMappingInitData,
    SloMappingSpecBase,
    SloTarget,
    initSelf,
} from '@rm98/core';

// ToDo after code generation:
// - Add configuration parameters to the <%= sloConfigType %> interface.
// - If the SLO does not produce SloCompliance objects as output,
//   adapt the second generic parameter of <%= sloMappingSpecType %> accordingly.
// - If the SLO should operate on a subtype of SloTarget,
//   adapt the third generic parameter of <%= sloMappingSpecType %> accordingly.
// - (optional) Replace the ObjectKind.group in the constructor of <%= sloMappingType %> with your own.
//   If you change the group name, ensure that you also accordingly adapt the `1-rbac.yaml` files of all
//   SLO controllers that need to write this SloMapping CRD.

/**
 * Represents the configuration options of the <%= sloName %> SLO.
 */
export interface  <%= sloConfigType %> {

}

/**
 * The spec type for the <%= sloName %> SLO.
 */
export class <%= sloMappingSpecType %> extends SloMappingSpecBase<
    // The SLO's configuration.
    <%= sloConfigType %>,
    // The output type of the SLO.
    SloCompliance,
    // The type of target(s) that the SLO can be applied to.
    SloTarget,
> { }

/**
 * Represents an SLO mapping for the <%= sloName %> SLO, which can be used to apply and configure the <%= sloName %> SLO.
 */
export class <%= sloMappingType %> extends SloMappingBase<<%= sloMappingSpecType %>> {

    @PolarisType(() => <%= sloMappingSpecType %>)
    spec: <%= sloMappingSpecType %>;

    constructor(initData?: SloMappingInitData<<%= sloMappingType %>>) {
        super(initData);
        this.objectKind = new ObjectKind({
            group: '<%= sloMappingTypeApiGroup %>',
            version: 'v1',
            kind: '<%= sloMappingType %>',
        });
        initSelf(this, initData);
    }

}

