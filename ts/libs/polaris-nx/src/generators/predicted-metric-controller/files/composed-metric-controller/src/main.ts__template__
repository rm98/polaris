import { KubeConfig } from '@kubernetes/client-node';
import { <%= compMetricType %>, <%= compMetricMapping %>, initPolarisLib } from '<%= compMetricTypePkg %>';
import { Logger, convertToNumber, getEnvironmentVariable } from '@rm98/core';
// eslint-disable-next-line @nrwl/nx/enforce-module-boundaries
import { initPolarisKubernetes } from '@rm98/kubernetes';
import { PrometheusComposedMetricsCollectorManager, initPrometheusQueryBackend } from '@rm98/prometheus';
import { <%= compMetricSourceFactory %> } from './app/metrics';

// Load the KubeConfig and initialize the @rm98/kubernetes library.
const k8sConfig = new KubeConfig();
k8sConfig.loadFromDefault();
const polarisRuntime = initPolarisKubernetes(k8sConfig);

// Initialize the Prometheus query backend.
const promHost = getEnvironmentVariable('PROMETHEUS_HOST') || 'localhost';
const promPort = getEnvironmentVariable('PROMETHEUS_PORT', convertToNumber) || 9090;
initPrometheusQueryBackend(polarisRuntime, { host: promHost, port: promPort }, true);

// Initialize any required Polaris mapping or composed metric libraries here.
initPolarisLib(polarisRuntime);

// Create the Prometheus scrapable endpoint.
const metricsEndpointPath = getEnvironmentVariable('PROMETHEUS_METRICS_ENDPOINT_PATH');
const metricsEndpointPort = getEnvironmentVariable('PROMETHEUS_METRICS_ENDPOINT_PORT', convertToNumber);
const promMetricsCollectorManager = new PrometheusComposedMetricsCollectorManager();
promMetricsCollectorManager.start({ path: metricsEndpointPath, port: metricsEndpointPort });

// Create a ComposedMetricsManager and watch the supported composed metric type kinds.
const manager = polarisRuntime.createComposedMetricsManager();
manager.startWatching({
    collectorFactories: [ promMetricsCollectorManager ],
    kindsToWatch: [
        {
            mappingKind: new <%= compMetricMapping %>().objectKind,
            metricType: <%= compMetricType %>.instance,
            metricSourceFactory: new <%= compMetricSourceFactory %>(),
        },
    ],
}).catch(error => {
    Logger.error(error);
    process.exit(1);
});
